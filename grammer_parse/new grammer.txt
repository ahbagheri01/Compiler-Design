Program -> Declaration_list #jp_main $
Declaration_list -> Declaration Declaration_list
Declaration_list -> ε
Declaration -> Declaration_initial Declaration_prime
Declaration_initial ->  Type_specifier #push_type  ID #decl_id
Declaration_prime -> Fun_declaration_prime
Declaration_prime -> Var_declaration_prime
Var_declaration_prime ->  ; #end_decl_var
Var_declaration_prime -> [  NUM #push_num ] #end_decl_arr ;
Fun_declaration_prime -> #into_scope #fun_declare_init ( Params ) #fun_declare_end Compound_stmt #outo_scope #jump_over_func
Type_specifier -> int
Type_specifier -> void
Params ->  int #push_type #decl_id ID Param_prime Param_list
Params -> void
Param_list -> , Param Param_list
Param_list -> ε
Param -> Declaration_initial Param_prime
Param_prime ->  [ ] #end_arr_param
Param_prime -> #end_var_param
Compound_stmt -> { Declaration_list Statement_list }
Statement_list -> Statement Statement_list
Statement_list -> ε
Statement -> Expression_stmt
Statement -> Compound_stmt
Statement -> Selection_stmt
Statement -> Iteration_stmt
Statement -> Return_stmt
Expression_stmt -> Expression ; #pop_exp
Expression_stmt -> break #save_break ;
Expression_stmt -> ;
Selection_stmt -> if ( Expression #assign_to_local ) #save_label Statement Else_stmt
Else_stmt -> endif #if_jpf
Else_stmt -> else #if_jpf_save_label Statement endif #then_jp
Iteration_stmt -> repeat #label Statement until ( Expression ) #repeat_jump
Return_stmt -> return Return_stmt_prime
Return_stmt_prime -> #return_void ;
Return_stmt_prime -> Expression #return_exp ;
Expression -> Simple_expression_zegond
Expression ->  ID #push_id B
B -> = Expression #assign
B -> [ Expression ] #indirect_addr H
B -> Simple_expression_prime
H -> = Expression #assign
H -> G D C
Simple_expression_zegond -> Additive_expression_zegond C
Simple_expression_prime -> Additive_expression_prime C
C ->  Relop #push_op Additive_expression #operate
C -> ε
Relop -> <
Relop -> ==
Additive_expression -> Term D
Additive_expression_prime -> Term_prime D
Additive_expression_zegond -> Term_zegond D
D -> Addop  #push_op Term #operate D
D -> ε
Addop -> +
Addop -> -
Term -> Factor G
Term_prime -> Factor_prime G
Term_zegond -> Factor_zegond G
G ->  * #push_op Factor #operate G
G -> ε
Factor -> ( Expression )
Factor ->  ID #push_id Var_call_prime
Factor ->  NUM #push_num_temp
Var_call_prime -> #find_function ( Args ) #call_func
Var_call_prime -> Var_prime
Var_prime -> [ Expression ] #indirect_addr
Var_prime -> ε
Factor_prime -> #find_function ( Args ) #call_func
Factor_prime -> ε
Factor_zegond -> ( Expression )
Factor_zegond ->  NUM #push_num_temp
Args -> Arg_list
Args -> ε
Arg_list -> Expression Arg_list_prime
Arg_list_prime -> , Expression Arg_list_prime
Arg_list_prime -> ε